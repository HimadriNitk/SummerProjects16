[04:38:00] *** Joins: chinmay_dd_ (~chinmay_d@104.131.27.40)
[04:39:06] *** Quits: chinmay_dd (~chinmay_d@2604:a880:800:10::153:1001) (Ping timeout: 264 seconds)
[04:39:12] *** chinmay_dd_ is now known as chinmay_dd
[09:02:37] *** Joins: salman-bhai (b63a5c4b@gateway/web/freenode/ip.182.58.92.75)
[09:11:06] *** Joins: vilas_m (3b63c44f@gateway/web/freenode/ip.59.99.196.79)
[09:13:52] <vinayb> chinmay_dd: nice one :P
[09:18:51] *** vinayb changes topic to 'Distributed Systems Programming with Erlang | Today's log: https://goo.gl/rjBqlA'
[09:19:44] <salman-bhai> Hi vilas_m and @vinayb!
[09:19:55] <vinayb> hey salman-bhai 
[09:20:03] <vilas_m> Hey salman-bhai! :D
[09:21:30] <salman-bhai> Busy week huh, @vinayb?
[09:22:27] <vinayb> you don't know the least of it. Binge watching Suits is tiring
[09:22:48] <vinayb> But seriously though, yeah pretty busy week 
[09:22:50] <salman-bhai> Which season? :p
[09:23:02] <salman-bhai> I can always give spoilers if u want
[09:23:10] <salman-bhai> U just have to ask :D
[09:23:18] <vinayb> 3 more episodes left in Season 5 :P
[09:24:01] <vinayb> I'm gonna wait until some more people come. So we'll start at 7 05 or 7 10
[09:24:25] <salman-bhai> No problem :p
[09:24:35] *** Joins: rakshith (~hehaichi@117.192.99.8)
[09:26:34] *** Joins: adarsh (6ace9115@gateway/web/freenode/ip.106.206.145.21)
[09:28:41] <salman-bhai> Hey rakshith and adarsh!
[09:29:00] <rakshith> Hey salman-bhai!
[09:29:47] <salman-bhai> @rakshith did u finish the assignment? :p
[09:29:54] <rakshith> yep :P
[09:30:04] <rakshith> wbu?
[09:30:14] <salman-bhai> Wow I'm the only one left :p
[09:30:21] <salman-bhai> I have 2 functions left
[09:31:15] <salman-bhai> I sent my laptop for repair :p
[09:31:25] <adarsh> hey salman bhai
[09:31:33] <rakshith> what had happened?
[09:31:44] <adarsh> i m with you don't worry
[09:31:55] <salman-bhai> Lol adarsh :p
[09:32:08] *** Joins: m_gautham (2d7d2594@gateway/web/freenode/ip.45.125.37.148)
[09:32:19] <salman-bhai> @rakshith I left it switched ON for 3 consecutive days some heating issue it seems :p
[09:32:27] <rakshith> lol!
[09:32:42] <salman-bhai> Hey m_gautham
[09:32:52] <m_gautham> thanks for the previous session
[09:33:02] <rakshith> The laptop should shut down by itself after a temperature threshold though
[09:33:13] <m_gautham> hi salman
[09:33:32] <m_gautham> *salman-bhai
[09:33:37] <salman-bhai> It did after a burning smell which my mom thought was fire in the house
[09:33:43] <salman-bhai> LOl gautham :p
[09:33:54] <salman-bhai> m_gautham*
[09:35:05] <rakshith> salman-bhai, waiting for Suits S06? :P
[09:35:57] <salman-bhai> July 13 it is my friend
[09:36:04] <salman-bhai> :D
[09:36:12] <rakshith> 1 more month still :(
[09:37:33] *** Joins: vilas_m_ (3b63c44f@gateway/web/freenode/ip.59.99.196.79)
[09:38:48] <salman-bhai> vilas_m paying two times the attention?
[09:39:13] <vilas_m_> LOL xD No, the other one got hanged for some reason :P
[09:39:25] <salman-bhai> :D
[09:39:32] *** Quits: vilas_m (3b63c44f@gateway/web/freenode/ip.59.99.196.79) (Ping timeout: 250 seconds)
[09:40:19] <vinayb> hey guys
[09:40:23] <vinayb> let's start then
[09:40:54] <vinayb> Everyone ready?
[09:40:58] <vilas_m_> Yup
[09:41:00] <salman-bhai> Yeah
[09:41:08] <m_gautham> yup
[09:41:36] <adarsh> yeah
[09:41:50] <vinayb> today we are going to be talking about Higher Order Functions
[09:42:02] <vinayb> does anyone have an idea what they might be?
[09:42:32] <salman-bhai> no
[09:42:50] <vilas_m_> No
[09:42:53] <rakshith> no
[09:43:08] <vinayb> Higher order functions are those functions that can take a function as a parameter and/or return a function
[09:43:27] <vinayb> fire up your editors and shell and type this out:
[09:43:29] *** Joins: adarsh_ (6ad8a300@gateway/web/freenode/ip.106.216.163.0)
[09:43:43] <vinayb> five() -> 5.
[09:43:46] <vinayb> six() -> 6.
[09:43:55] *** Joins: m_gautham_ (2d7d2657@gateway/web/freenode/ip.45.125.38.87)
[09:44:04] <vinayb> add(A,B) -> A() + B().
[09:44:22] <vinayb> save the file, and load the module into the shell
[09:44:31] <vinayb> now tell me the output for these:
[09:44:46] <vinayb> module_name:add(five,six).
[09:44:54] <vinayb> module_name:add(5,6).
[09:45:36] *** Quits: m_gautham (2d7d2594@gateway/web/freenode/ip.45.125.37.148) (Ping timeout: 250 seconds)
[09:46:02] *** Quits: adarsh (6ace9115@gateway/web/freenode/ip.106.206.145.21) (Ping timeout: 250 seconds)
[09:48:13] <vinayb> I'm waiting guys
[09:48:33] <vilas_m_> I am getting exception error: bad function five :/
[09:48:39] <vinayb> good :) i
[09:48:45] <vinayb> i'm looking for exceptions ;)
[09:48:47] <salman-bhai> So am I
[09:49:02] <salman-bhai> Oh I thought I made a mistake
[09:49:17] <adarsh_> yeah, that's what i got to
[09:49:18] <adarsh_> *too
[09:50:11] <vinayb> You are getting exceptions because the function expects two other functions as it's parameters
[09:50:14] <vinayb> now try this:
[09:50:22] *** Quits: m_gautham_ (2d7d2657@gateway/web/freenode/ip.45.125.38.87) (Ping timeout: 250 seconds)
[09:50:37] <vinayb> module_name:add(fun module_name:five/0, fun module_name:six/0).
[09:51:13] <vilas_m_> 11
[09:52:08] <vinayb> Yes, so we this special syntax
[09:52:29] <vinayb> whenever we want to pass functions as parameters, we have to specify fun module_name:function/arity
[09:52:38] <vinayb> so that Erlang doesn't confuse it for an atom
[09:52:57] <vinayb> Let's see how functions can return functions
[09:53:03] <vinayb> type this:
[09:53:23] <vinayb> Adder(N) ->
[09:53:38] <vinayb>   fun (X) -> X + N end.
[09:54:48] <vinayb> what we've done here is we've created an Anonymous Function
[09:55:02] <vinayb> Anonymous function are functions that have no names
[09:55:11] <vinayb> They are created on the fly
[09:55:23] <vinayb> Adder is a function that RETURS OTHER functions
[09:55:25] <vinayb> let's see how
[09:55:36] <vinayb> type this in the shell after loading:
[09:55:54] <vinayb> Add2 = Adder(2).
[09:56:04] <vinayb> Add2(4).
[09:56:07] <vinayb> Add2(6).
[09:56:09] <vinayb> what
[09:56:12] <vinayb> is the output?
[09:56:38] *** Joins: m_gautham__ (75c67091@gateway/web/freenode/ip.117.198.112.145)
[09:58:01] <vilas_m_> Getting some errors while compiling :/
[09:58:26] <vinayb> make it small, make it adder instead of Adder
[09:58:36] <vinayb> and don't forget export and module
[09:58:46] <vilas_m_> Yea now it works.
[09:59:05] <vinayb> then in the shell, don't forget to prefix the module name when you call adder
[09:59:16] <vinayb> Add2 = module_name:adder(2)>
[09:59:24] <vinayb> Add2 = module_name.adder(2).
[09:59:26] <vinayb> *
[09:59:29] <vinayb> sorry about that
[09:59:58] <vilas_m_> Add2(4) is 6, Add2(6) is 8
[10:00:06] <vinayb> correct! now try this:
[10:00:15] <vinayb> Add6 = module_name:adder(6).
[10:00:20] <vinayb> Add6(1).
[10:00:25] <vinayb> Add6(5).
[10:00:48] <vilas_m_> 7 and 11
[10:00:55] <vinayb> correct! so what's happening here?
[10:01:38] <rakshith> when declaring Add2 we give the input to the outer function
[10:01:47] <rakshith> in the next statement we call the inner function?
[10:02:12] <vilas_m_> Basically a function calls another function to do the work.
[10:02:24] <vinayb> when we call adder, it returns a function to us. It's NOT calling the other function
[10:02:37] <vinayb> we are binding that function to a variable
[10:02:42] <vinayb> THEN we call the variable
[10:02:46] <vinayb> very important difference
[10:03:09] <vinayb> so basically: adder is a function that returns another function to us
[10:03:38] <vinayb> any doubts?
[10:04:00] <rakshith> no
[10:04:41] <vilas_m_> No
[10:05:43] <adarsh_> no
[10:06:51] <rakshith> what are the series of numbers I get when I bind the function to a variable? #Fun<module_name.0.86274515>?
[10:07:16] *** Quits: m_gautham__ (75c67091@gateway/web/freenode/ip.117.198.112.145) (Ping timeout: 250 seconds)
[10:08:29] <vinayb> That is the reperesentation of an anon function. The numbers are just an ID
[10:08:34] <vinayb> now type this onto your file:
[10:09:02] <vinayb> function1(String1) ->
[10:09:02] <vinayb>   io:format("Func 1 got called with ~s as parameter!~n", [String1]),
[10:09:02] <vinayb>   fun (String2) -> 
[10:09:02] <vinayb>     io:format("Anon function called with ~s as param, and I also remember ~s!~n", [String2, String1])
[10:09:05] <vinayb>   end.
[10:10:40] <vinayb> now type this in shell:
[10:11:06] *** Joins: m_gautham (67f62a32@gateway/web/freenode/ip.103.246.42.50)
[10:11:17] <vinayb> AnonFunc = module_name:function1("password=abcdefgh").
[10:11:24] <vinayb> AnonFunc("Trolled!").
[10:12:25] <vilas_m_> Func 1 got called with password=abcdefgh as parameter!
[10:12:34] <vilas_m_> Anon function called with Trolled! as param, and I also remember password=abcdefgh!
[10:13:14] <vinayb> Right! so did you see WHEN exactly the anonymous function was called?
[10:13:59] <vilas_m_> When we call the function AnonFunc with another string.
[10:14:35] <vinayb> Yes! So function1 only RETURNS a function to you. You can call it whenever you want to!
[10:15:01] <vinayb> Now let's see a powerful benefit:
[10:15:29] <vinayb> in the definition of function1, would you agree that the scope of parameter String1 is limited to just the function?
[10:15:50] <vilas_m_> Yup.
[10:16:00] <vinayb> what I mean is, if you try accessing String1 outside the function, you'll get an error!
[10:16:13] <vinayb> Because it's only in the scope of function1
[10:16:32] <vinayb> but we see how using an anonymous functions, we can preserve the value of the parameter
[10:16:39] <vinayb> *function
[10:17:21] <vinayb> This is why, Anonymous Functions are also called Closures, because they ENCLOSE the context in a function, and by nicely wrapping it up, you can use them wherever you want
[10:17:47] <rakshith> Isn't the anon function technically in the scope of function1? How is it an advantage?
[10:19:20] <vinayb> because the anon function was CALLED outside the context of function1. You are using the String1 value (remember io:format("...", [String1, String2]) in anon func definition)
[10:20:16] *** Quits: vilas_m_ (3b63c44f@gateway/web/freenode/ip.59.99.196.79) (Ping timeout: 250 seconds)
[10:20:39] <vinayb> Only the function definition of anon func is in function1. When function1 returns anon func, anon func can be called and used wherever you wish
[10:20:50] <rakshith> i get it..
[10:21:12] <vinayb> any doubts?
[10:21:19] <rakshith> no
[10:21:21] <salman-bhai> no
[10:21:52] <m_gautham> no
[10:22:00] <adarsh_> no
[10:22:16] <vinayb> let's see how we can use Higher Order Functions more
[10:22:24] <vinayb> write this in your file:
[10:22:41] <vinayb> map(_, []) -> [];
[10:22:58] <vinayb> map(F, [H|T]) -> [F(H)|map(F,T)].
[10:23:40] <vinayb> now in the shell, try this:
[10:24:05] <vinayb> module_name:map(fun(X) -> X + 5 end, [1,2,3,4,5,6,7,8,9,10]).
[10:24:41] <salman-bhai> 2> high:map(fun(X) -> X + 5 end, [1,2,3,4,5,6,7,8,9,10]). [6,7,8,9,10,11,12,13,14,15]
[10:25:01] <salman-bhai> [6,7,8,9,10,11,12,13,14,15]
[10:25:15] <vinayb> now try this:
[10:25:53] <vinayb> module_name:map(fun(X) -> X*5 end, lists:seq(1,10)).
[10:26:22] <salman-bhai> [5,10,15,20,25,30,35,40,45,50]
[10:26:42] <vinayb> Right! so what exactly is happening here?
[10:26:59] <salman-bhai> It generates the sequence automatically
[10:27:09] <salman-bhai> The list*
[10:27:15] *** Joins: vilas_m (2d7d2482@gateway/web/freenode/ip.45.125.36.130)
[10:27:32] <rakshith> mapping the members of the list with a function we provide
[10:27:40] <vinayb> exactly!
[10:27:53] <vinayb> it maps each x from the list to F(x)
[10:28:16] <vinayb> now let's go over the definition of map 
[10:28:24] <vinayb> what's happening there?
[10:29:22] <rakshith> recursively adding F(H) to the list
[10:29:42] <adarsh_> building the list and returning it with F(H)
[10:30:17] <vilas_m> Recursively multiply each element by 5.
[10:30:26] <vinayb> okay, from map(F, [1,2,3,4]), give me the trace
[10:31:02] <vinayb> assume F = fun (X) -> X + 5 end.
[10:31:39] <vilas_m> -> [ 1*5 , map(F, [2,3,4]) ]
[10:32:05] <vinayb> no commas, use the cons operator ;)
[10:32:05] <vilas_m> |* sorry
[10:32:26] <salman-bhai> map(F, [1,2,3,4]) -> [1 + 5| map(F, [2,3,4]) ]
[10:32:41] <rakshith> and so on... [4*5 | map(F,[])]
[10:33:02] <vinayb> salman-bhai: give me the whole trace
[10:33:07] <adarsh_> have some work..gotta go..will the see the logs later
[10:33:07] <rakshith> the last statement just appends an empty list to  the current list
[10:33:11] *** Quits: adarsh_ (6ad8a300@gateway/web/freenode/ip.106.216.163.0) (Quit: Page closed)
[10:33:27] <salman-bhai> map(F, [2,3,4]) -> [2 + 5| map(F, [3,4]) ].
[10:33:36] <salman-bhai> map(F, [3,4]) -> [3 + 5| map(F, [3,4]) ].
[10:33:47] <salman-bhai> map(F, [3,4]) -> [3 + 5| map(F, [4]) ].*
[10:34:07] <salman-bhai> map(F, [4]) -> [4 + 5| map(F, []) ].
[10:34:22] <salman-bhai> map(F, []) -> [ ].
[10:34:30] <vinayb> and how do the returned values build to the final solution?
[10:34:45] <rakshith> normal recursion
[10:35:10] <vinayb> correct!
[10:35:11] <rakshith> [F(1)|F(2)|F(3)|F(4)]
[10:35:19] <salman-bhai> Aree it'll be like this
[10:35:31] <salman-bhai> Yeah how Rakshith showed it , recursion.
[10:36:07] <vinayb> rakshith: don't forget the empty list 
[10:36:13] <rakshith> yeah
[10:36:17] <rakshith> [F(1)|F(2)|F(3)|F(4)|[]]
[10:37:20] <vinayb> Alright, now I'll give you a description of a function, and you guys have to tell me how the definition would look like
[10:37:51] <vinayb> filter(F, List) should return a list for which the elements of the list are true given the predicate function F
[10:38:09] <vinayb> a predicate function is a function which only returns boolean values
[10:39:06] <vilas_m> Adding a case .... of expression ?
[10:39:09] <vinayb> eg: filter(fun (X) -> X rem 2 =:= 0 end, lists:seq(1,10)) should give me [2,4,6,8,10]
[10:39:22] <vinayb> yes vilas_m ! flesh it out more
[10:39:47] <vilas_m> filter( _ , [] ) -> [ ].
[10:40:10] <vilas_m> filter( F, [H|T] ) -> case F(H) of
[10:40:45] <vilas_m> true-> [ H | filter ( F, T ) ];
[10:41:01] <vilas_m> false-> [ filter ( F, T ) ] end.
[10:42:30] <vinayb> did you try compiling this?
[10:42:43] <vilas_m> No. I'll try it
[10:43:06] <vilas_m> Is it wrong?
[10:45:52] <vinayb> no i just want you to try it out. i'm not saying it's right or wrong :P try it out with some examples and tell me the output
[10:46:52] <vinayb> and guys i want to see your solutions too!
[10:47:47] <salman-bhai> Syntax error -_-
[10:47:51] <vinayb> hint: you might need another parameter to pass the values during Recursino
[10:48:00] <vinayb> salman-bhai: i want you to try your own solution!
[10:48:08] <vinayb> no copying!
[10:48:38] <salman-bhai> OH okay
[10:48:49] <rakshith> filter(F,[H|T]) -> [fun (H) -> Z=F(H), if Z==true -> [H|filter(F,T)] ; true -> [filter(F,T)] end]
[10:49:13] <rakshith> filter(_,[]) -> [] in the begining
[10:49:45] <vinayb> did you compile and run this and test it?
[10:49:51] <vilas_m> i removed the [ ] for the false case :P  enter this : erlang6:filter(fun (X) -> X rem 2 == 0 end, lists:seq(1,10)) and the output is [2,4,6,8,10].
[10:49:53] <rakshith> i'll do
[10:51:25] *** Quits: m_gautham (67f62a32@gateway/web/freenode/ip.103.246.42.50) (Quit: Page closed)
[10:52:22] <rakshith> syntax error
[10:52:36] <vinayb> keep trying guys
[10:52:42] <vinayb> nice work vilas_m ! 
[10:56:43] <vinayb> okay take this as homework, and keep testing with lots of examples
[10:56:49] <vinayb> now let's move on to folds
[10:56:49] <rakshith> I get it but in a wierd way
[10:57:07] <rakshith> [[[2,[[4,[[6,[[8,["\n"]]]]]]]]]]
[10:57:29] <salman-bhai> I'm sorryy still stuck
[10:57:41] <vinayb> keep working on it! Note the approach you are gonna take to FOLDS and then think about filter ;)
[10:57:42] <rakshith> filter(F,[H|T]) -> [begin Z=F(H), if Z==true -> [H|filter(F,T)] ; true -> filter(F,T) end end].
[10:57:48] <rakshith> I used that definition
[10:58:13] <vinayb> keep this on hold. once you guys play around with Fold's definition, it will become clear
[10:58:13] <rakshith> I'm getting nested lists..
[10:58:30] <vinayb> alright, i'll give you guys a description of fold
[10:59:14] <vinayb> fold(BinaryFunction, List, Accumulator) is a function which takes 3 parameters: a function that operates on two params, a list, and a starting value
[10:59:43] <vinayb> eg:
[11:00:16] <vinayb> fold(fun(X,Y) -> X + Y end, lists:seq(1,100), 0).
[11:00:20] <vinayb> should give me 5060
[11:00:22] <vinayb> *5050
[11:01:02] <vinayb> it takes the Acc parameter, applies it with first element of list, takes their result, applies it to second element, takes THEIR result, applies it.. and son on
[11:01:05] <vinayb> *so on
[11:01:10] <vinayb> how would this be defined?
[11:03:35] <salman-bhai> no idea
[11:03:45] <vinayb> notice how you have to pass the accumulator through the recursion
[11:03:57] <vinayb> okay, i'll give you the definition of filter. we'll come to fold.
[11:04:03] <vinayb> filter(Pred, L) -> lists:reverse(filter(Pred, L,[])).
[11:04:03] <vinayb> filter(_, [], Acc) -> Acc;
[11:04:03] <vinayb> filter(Pred, [H|T], Acc) ->
[11:04:03] <vinayb>     case Pred(H) of
[11:04:03] <vinayb>         true  -> filter(Pred, T, [H|Acc]);
[11:04:05] <vinayb>         false -> filter(Pred, T, Acc)
[11:04:08] <vinayb>     end.
[11:04:31] <vinayb> we have two functions here filter/2 which calls interally filter/3
[11:04:32] <rakshith> vinayb, this worked for me
[11:04:32] <rakshith> filter(F,[H|T]) -> Z=F(H), if Z==true -> [H|filter(F,T)] ; true -> filter(F,T) end .
[11:04:47] <vinayb> nice! good going rakshith !
[11:05:04] <vinayb> have a look at the other definition too :)
[11:05:49] <salman-bhai> SO what do we export?
[11:05:57] <vinayb> filter/2
[11:06:05] <salman-bhai> OKay.
[11:06:45] <rakshith> is this some kind of function overloading?
[11:07:26] <vinayb> Yes, you could call it that. That's why we always mention the arity of a function we specify
[11:08:44] <salman-bhai> Example?
[11:09:01] <vinayb> when we export, we always mention the arity
[11:09:21] <vinayb> remember: a function is specified by it's name as well as arity
[11:09:40] <vinayb> so to Erlang, filter/2 and filter/3 are different functions
[11:10:32] <vinayb> so as you saw in the other defintion of filter, to build the output list, we use a seperate Acc parameter
[11:10:59] <vinayb> i'll give you guys the first line of fold's definition, you must give me second :P 
[11:11:07] <vinayb> yes, it can be defined in only two lines
[11:12:29] <vinayb> fold(_, [], Acc) -> Acc;
[11:13:04] <vinayb> fold(F, [H|T], Acc) -> 
[11:13:09] <vinayb> just fill out the rest
[11:13:11] <vinayb> one line body
[11:13:35] <vilas_m> fold(F, T, F(Acc,H)).
[11:13:45] <vinayb> correct! 
[11:14:17] <vinayb> so this is how, using fold, you can "distill" a list onto a single output
[11:14:25] <vinayb> now, you see we used an accumulator
[11:14:30] <vinayb> what if i did this:
[11:14:36] <vinayb> fold2(F, List) 
[11:15:23] <vinayb> and instead of Acc and first element, it starts off with the first couple elements
[11:15:31] <vinayb> how would the definition of fold2 look like?
[11:16:57] <vilas_m> fold2( F, [A,B|T]) -> fold2( F, [F(A,B)|T ). ?
[11:17:16] <vilas_m> ]*
[11:17:37] <vinayb> don't forget the base case
[11:17:40] <vinayb> :p
[11:19:16] <vilas_m> fold2( F, [ A | [ ] ] ) ->  A ?
[11:19:42] <vilas_m> I'm confused about the base case :P
[11:20:07] <vinayb> can you think of a way to do this by overloading fold2? ;)
[11:20:47] <vinayb> Anyways, that's all for today!
[11:21:11] <vinayb> HW: Figure out fold2, and filter2 (filter using fold in the definition)!
[11:21:12] <vilas_m> fold2 ( F, [H|T] ) -> fold ( F , T , F(H) ) ?
[11:21:25] <vinayb> it's a binary function vilas_m 
[11:21:39] <salman-bhai> Umm @vinayb can u explain function overloading once?
[11:22:26] <vinayb> don't think of it as function overloading. it's two seperate functions, whenever you call it with two parameters, Erlang knows which one to call, whenever you call with three parameters, Erlang knows the other to call
[11:22:35] <salman-bhai> I've just dived into oo
[11:22:40] <salman-bhai> oh okay
[11:23:23] <vinayb> Anyways, your HW will be part of your upcoming assignment
[11:23:35] <vinayb> Don't worry guys! These things take time to understand!
[11:23:46] <rakshith> what homework?
[11:23:53] <salman-bhai> OKay
[11:23:53] <vinayb> Go over my logs again, and ask me any doubts you have
[11:24:06] <vinayb> HW: figure out how to implement fold2, and filter2
[11:24:19] <vinayb> filter2 is filter but should use fold or fold2 in its' definition
[11:25:53] <vilas_m> Awesome session today! :D I definitely started appreciating Erlang now! :P Thanks a lot :)
[11:26:13] *** Parts: vilas_m (2d7d2482@gateway/web/freenode/ip.45.125.36.130) ()
[11:28:00] <vinayb> I'm still here if you any doubts guys
[11:28:07] <vinayb> take your time to figure out things
[11:28:16] <vinayb> Trust me, when it clicks, you'll feel great!
[11:29:30] <rakshith> Is functional programming about writing less code to do the same work?
[11:29:37] <rakshith> I mean, everything is one line here :P
[11:31:25] <vinayb> One of the perks of FP, yes, less is more ;)
