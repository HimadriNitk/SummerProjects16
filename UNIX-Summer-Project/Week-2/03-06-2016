--- Log opened Fri Jun 03 19:46:48 2016
19:46 ::: soundaryaramesh [~soundarya@117.202.66.169] has joined #ieee-UNIX
19:46 ::: Irssi: #ieee-UNIX: Total of 4 nicks [0 ops, 0 halfops, 0 voices, 4 normal]
19:46 ::: Irssi: Join to #ieee-UNIX was synced in 2 secs
19:56 ::: swati [~swati@59.93.238.24] has joined #ieee-UNIX
19:57 ::: siddhanth [2d723d18@gateway/web/freenode/ip.45.114.61.24] has joined #ieee-UNIX
19:58 ::: kaushik_sk [~kaushik21@61.1.215.70] has joined #ieee-UNIX
19:59 ::: ABHISHEK [2bf79cb8@gateway/web/freenode/ip.43.247.156.184] has joined #ieee-UNIX
20:00 < soundaryaramesh> Hey guys.
20:00 < soundaryaramesh> We'll be starting the session now.
20:01 < soundaryaramesh> We are sorry abt the long interval in between. We were busy with our things. 
20:01 < soundaryaramesh> So today we will be covering a few commands. This session won't go on for very long hopefully. 
20:02 < soundaryaramesh> And regarding projects, you guys should start reading about what you can do. 
20:03 < soundaryaramesh> If you have any ideas or any doubts, feel free to contact any on of us.
20:03 ::: AdithyaBhat [dfe38d3b@gateway/web/freenode/ip.223.227.141.59] has joined #ieee-UNIX
20:03 < soundaryaramesh> So the first thing we will be learning today is: Pipes
20:03 < soundaryaramesh> Pipes are represented by '|'
20:04 < soundaryaramesh> These are generally used with filters. 
20:04 < soundaryaramesh> The output of one command is used as an input for the other.
20:04 < soundaryaramesh> For ex: ls| wc -c
20:04 < soundaryaramesh> wc -c basically counts the number of characters in a file.
20:05 < soundaryaramesh> So wc -c is basically expecting a file as input.
20:05 < soundaryaramesh> But when we pipe the output of ls command to wc, the output of ls will be it's input
20:06 < soundaryaramesh> You can try thing command right now to see the output.
20:06 < soundaryaramesh> The output of ls will no longer be displayed on the terminal. Only the output of wc will be displayed.
20:06 < soundaryaramesh> You guys are getting it right?
20:06 < soundaryaramesh> Any doubts so far?
20:07 < kaushik_sk> yeah getting it
20:07 < soundaryaramesh> Cool :)
20:08 < soundaryaramesh> And for this week's task, i want u guys to read up about shell metacharacters.
20:09 < soundaryaramesh> They are quite similar to regex symbols but have different meaning. 
20:09 < soundaryaramesh> But these are very useful too.
20:09 < soundaryaramesh> For ex: ls *.txt displays all text documents in the current directory. But * had different meaning in regex.
20:10 ::: m_gautham_ [67f62a32@gateway/web/freenode/ip.103.246.42.50] has joined #ieee-UNIX
20:10 ::: AdithyaBhat [dfe38d3b@gateway/web/freenode/ip.223.227.141.59] has quit [Ping timeout: 250 seconds]
20:10 < soundaryaramesh> And there can be multiple '|' in a single command. 
20:12 < soundaryaramesh> the main feature of unix is having many simple tools to achieve complex things. This is exactly wat a '|' helps you achieve
20:12 < soundaryaramesh> So wat will the output of the following statement:
20:12 < soundaryaramesh> cat *.c|wc -l
20:13 < kaushik_sk> pipe all the text in all the files ?
20:14 < soundaryaramesh> @kaushik, okay, so what will be the output?
20:14 < kaushik_sk> what does -l do ? :p
20:14 < soundaryaramesh> man wc to find out wat wc -l does. 
20:15 < kaushik_sk> ok
20:15 < kaushik_sk> prints number on lines
20:15 < kaushik_sk> in all the text files combined ?
20:15 < soundaryaramesh> An important step towards learning UNIX commands is mastering how to use man command. 
20:15 < soundaryaramesh> @Kaushik,correct!
20:16 < soundaryaramesh> And wat will be the output of wc -l *.c
20:16 < soundaryaramesh> ?
20:17 < soundaryaramesh> Try it out right now. And tell me the output.
20:17 < kaushik_sk> isn't it the same ?
20:18 < soundaryaramesh> @kaushik, Did you try it out?
20:19 < soundaryaramesh> And very soon, we will be assessing your understanding. So make sure you read up things which we ask you guys to.
20:20 < swati> it prints the number of lines in each file?
20:20 < soundaryaramesh> @swati, Correct!
20:21 < soundaryaramesh> So basically it displays filenames along with the number of lines in them and finally prints the total.
20:23 < soundaryaramesh> Now the next command
20:23 < soundaryaramesh> tee
20:23 < soundaryaramesh> When we use pipes, the output is generally not displayed on the standard output, ie the terminal. 
20:24 < soundaryaramesh> tee command helps in duplicating it's input, by writing one of it in a file and the other to the std output.
20:25 ::: swati [~swati@59.93.238.24] has quit [Ping timeout: 264 seconds]
20:25 ::: swati_ [~swati@59.93.239.161] has joined #ieee-UNIX
20:25 < soundaryaramesh> ex: ls| tee abc.txt
20:25 < soundaryaramesh> This will display all the files on the terminal. It will also write it into the file abc.txt
20:26 < soundaryaramesh> Next important command is cut
20:27 < soundaryaramesh> It will help you extract specific columns/field from each line in a file
20:27 < soundaryaramesh> Eg : cut -c 2-5,7-9 abc.txt
20:28 < soundaryaramesh> This will print all the characters from 2nd col to 5th col and 7th col to 9th col in the file abc.txt
20:29 < soundaryaramesh> Also cut -c -3,6- abc.txt will print 1-3 characters and all characters from the 6th one
20:30 < soundaryaramesh> A much more useful option used with cut is -f
20:31 < soundaryaramesh> If you have many columns of info in a database, and if you have to extract a particular col,we can use cut -f
20:31 < soundaryaramesh> Eg: cut -f 2,3 abc.txt| tee bc.txt
20:31 < soundaryaramesh> This extracts the second and third fields from abc.txt and saves it in bc.txt
20:32 < soundaryaramesh> Also cut assumes tab space as the default delimiter.
20:32 < soundaryaramesh> But say you have a file where : is the delimiter.
20:32 < soundaryaramesh> then we should use -d option as follows
20:32 < soundaryaramesh> cut -d ":" -f 2,3 abc.txt
20:34 < soundaryaramesh> Task 2: Try to print the number 28 using the cal command.
20:34 ::: kaushiksk [~kaushik21@59.93.236.178] has joined #ieee-UNIX
20:35 < soundaryaramesh> cal command basically displays the current month
20:35 < soundaryaramesh> So try to print only the value 28 through a sequence of commands.
20:35 < soundaryaramesh> Clue: You can use pipe, grep
20:36 < soundaryaramesh> Next paste command
20:37 < soundaryaramesh> What you cut with cut command can be pasted back using paste command vertically.
20:37 < soundaryaramesh> Eg: paste cutlist1 cutlist2
20:37 ::: kaushik_sk [~kaushik21@61.1.215.70] has quit [Ping timeout: 258 seconds]
20:38 < soundaryaramesh> If you have file one with only the first two fields and the second file with fourth and fifth fields, then you van paste these four columns together using paste
20:38 < soundaryaramesh> Try it out to get a better idea.
20:38 < soundaryaramesh> Also the default delimiter here is tab space again.
20:39 < soundaryaramesh> So if you want the fields of the two files to be separated by something else, use -d option
20:40 < soundaryaramesh> paste is more useful when u want to modify the data in a single file into multiple columns.
20:41 < soundaryaramesh> Eg: Now create a file with the characters a,b,c,d,e,f each one in a new line
20:41 < soundaryaramesh> And now execute paste -s -d"||\n" <filename>
20:42 < soundaryaramesh> -s option helps you join multiple lines within a file.
20:42 < soundaryaramesh> So wat is your output? Anybody?
20:43 ::: Harita_Reddy_ [3cfe7e20@gateway/web/freenode/ip.60.254.126.32] has quit [Quit: Page closed]
20:43 < soundaryaramesh> It will be:
20:43 < soundaryaramesh> a|b|c
20:43 < soundaryaramesh> d|e|f
20:43 < ABHISHEK> Yes
20:44 < kaushiksk> yeah
20:44 < soundaryaramesh> The delimiter is basically used in a circular manner.
20:45 ::: AndroUser2 [~androirc@103.246.42.50] has joined #ieee-UNIX
20:45 < soundaryaramesh> ie, the first and second lines are joined by |, same would be true for second and third lines.
20:45 < soundaryaramesh> But the third and fourth line will be separated by a new line char. And this cycle repeats.
20:45 ::: Harita_Reddy_ [3cfe7e20@gateway/web/freenode/ip.60.254.126.32] has joined #ieee-UNIX
20:46 < soundaryaramesh> next command : sort
20:46 < soundaryaramesh> This helps in sorting data in ascending or descending order.
20:46 < soundaryaramesh> Generally by default it follows the ASCII sequence.
20:47 < soundaryaramesh> ie, a space comes before digits, digits before capital letters, and capital letters before small letters
20:47 < soundaryaramesh> So, say a file contains:
20:47 < soundaryaramesh> 2
20:48 < soundaryaramesh> 1000
20:48 < soundaryaramesh> 300
20:48 < soundaryaramesh> 150
20:48 < soundaryaramesh> When u use sort <filename>
20:48 < soundaryaramesh> The sorted file would be:
20:48 < soundaryaramesh> 1000
20:49 < soundaryaramesh> 150
20:49 < soundaryaramesh> 2
20:49 < soundaryaramesh> 300
20:49 < soundaryaramesh> Why is this?
20:49 < soundaryaramesh> Because it uses the ASCII sequence. 
20:49 < soundaryaramesh> So when you sort numbers, you shuold use -n option.
20:50 < soundaryaramesh> I suggest you guys to spend some time with the man command. read the man page for every command you've come across to understand the command's capabilities.
20:51 < soundaryaramesh> Coming back to sort command,
20:51 < soundaryaramesh> If you have a database with many columns of info and u want to sort them in the asceding order of the second field.
20:52 < soundaryaramesh> And the fields are separated by |.
20:52 ::: AndroUser2 [~androirc@103.246.42.50] has quit [Ping timeout: 252 seconds]
20:53 < soundaryaramesh> sort -t \| -k 2 <filename> 
20:53 < soundaryaramesh> Here -t is used for delimiters
20:53 < soundaryaramesh> And \ is used to escape the special behavior of |.
20:53 < soundaryaramesh> Instead "|" can be used.
20:53 < soundaryaramesh> Here -k specifies the field(not -f)
20:54 < soundaryaramesh> To get descending order use -r option in addition to the above.
20:57 < soundaryaramesh> Task 3: Use ls -l command to display all files created in the month May and sort them according to the file size.
20:57 ::: AndroUser2 [~androirc@103.246.42.50] has joined #ieee-UNIX
20:57 ::: AndroUser2 [~androirc@103.246.42.50] has quit [Client Quit]
20:58 < soundaryaramesh> There are many many other options along with this.
20:58 < soundaryaramesh> Do look at the man page and find out more.
20:59 ::: AndroUser2 [~androirc@103.246.42.50] has joined #ieee-UNIX
20:59 < soundaryaramesh> There is a way to sort based on a particular field's column.
20:59 < soundaryaramesh> eg: sort -k 5.7,5.8 <filename>
21:00 < soundaryaramesh> will sort the file based on the values of the 7th and 8th col of the 5th field.
21:00 < soundaryaramesh> try it out to understand better.
21:01 < soundaryaramesh> Next command: uniq
21:02 < soundaryaramesh> When you merge files, you might not want duplicate entries, so to get rid of them uniq is used.
21:02 < soundaryaramesh> sort also has an option -u to remove duplicate lines.
21:03 < soundaryaramesh> uniq requires sorted file as input. This is important.
21:04 < soundaryaramesh> option -c of uniq prints the frequnecy of occurence of all lines, along with the lines.
21:06 < soundaryaramesh> Next command: tr
21:06 < soundaryaramesh> It stands for translating characters.
21:06 < soundaryaramesh> It manipulates individual characters in a line
21:08 < soundaryaramesh> This command does not have filename as argument.
21:08 < soundaryaramesh> Hence you should use < to redirect the input from a file.
21:09 < soundaryaramesh> Syntax: tr options expression1 expression2 std_input
21:09 < soundaryaramesh> tr translates each character in expression1 to the mapped counterpart in expression2
21:10 ::: AdithyaBhat [dfe38d3b@gateway/web/freenode/ip.223.227.141.59] has joined #ieee-UNIX
21:10 ::: TheSilentSpectat [~TheSilent@223.227.141.59] has joined #ieee-UNIX
21:10 < soundaryaramesh> eg: tr '|/' '#!' < filename
21:11 < soundaryaramesh> This replaces every | to # and every / to ! 
21:12 < soundaryaramesh> you can also use variables to hold the expressions.
21:13 < soundaryaramesh> ie, exp1="|/"; exp2='#!'
21:14 < soundaryaramesh> tr "$exp1" "$exp2" < filename
21:14 < soundaryaramesh> The meaning of $, you will understand in the next session.
21:15 ::: siddhanth [2d723d18@gateway/web/freenode/ip.45.114.61.24] has quit [Quit: Page closed]
21:15 < soundaryaramesh> cat filename| tr '[a-z]' '[A-Z]'
21:15 < AdithyaBhat> Now, if you want to replace all lower case letters to upper case letters.
21:15 < soundaryaramesh> oops :P
21:16 < AdithyaBhat> What is the straight forward way?
21:18 < kaushiksk> straight forward ?
21:18 < soundaryaramesh> okay the next option we can look at is -d
21:19 < soundaryaramesh> it deletes all the characters mentioned.
21:20 < soundaryaramesh> ie, tr -d '\|' < filename deletes all the \ and | from the file
21:20 < AdithyaBhat> Ill continue my question later. Onto the -d option now.
21:20 < AdithyaBhat> Soundarya continue.
21:20 < soundaryaramesh> -s option is used for compressing multiple consecutive characters together.
21:21 < soundaryaramesh> ie, if you want to compress many consecutive spaces to just one space, -s " " should be used.
21:22 < soundaryaramesh> -c option basically complements the set of characters in the expression
21:22 < soundaryaramesh> eg: tr -cd "|\" < filename
21:22 ::: AndroUser2 [~androirc@103.246.42.50] has quit [Read error: Connection reset by peer]
21:22 < soundaryaramesh> deletes all characters other than | and \.
21:23 < soundaryaramesh> That's all the options of tr.
21:24 < soundaryaramesh> @adithya, you can continue with your question now.
21:25 ::: Varsh [db404714@gateway/web/freenode/ip.219.64.71.20] has joined #ieee-UNIX
21:25 < AdithyaBhat> There is an alternative to using tr "[a-z]" "[A-Z]"
21:25 < AdithyaBhat> That alternative is:
21:25 < AdithyaBhat> tr "[:lower:]" "[:upper:]"
21:27 < AdithyaBhat> now the question is:
21:27 < AdithyaBhat> What will tr "[:digit:]" "1234567890" do?
21:28 < kaushiksk> replace a digit with the next digit? 
21:28 < kaushiksk> I'm just guessing cause 0 might come first in a list of digits
21:28 < AdithyaBhat> Try it.
21:30 < Harita_Reddy_> it replaced the digit with next digit
21:30 < kaushiksk> Yeah
21:30 < AdithyaBhat> Correct.
21:30 < AdithyaBhat> Was the metacharacter "<" discussed?
21:32 < kaushiksk> Nope
21:32 < AdithyaBhat> "<" can be used to convert a file into a stream and feed it as input to a command.
21:32 < AdithyaBhat> Like for tr.
21:32 < AdithyaBhat> tr -d "\n" < some_file
21:32 < kaushiksk> Oh ok. Just the opposite of the usage of ">" then ?
21:32 < AdithyaBhat> Kind of.
21:33 < AdithyaBhat> Now that you have learnt about pipes.
21:33 < AdithyaBhat> I want you all to find out the difference between | and <
21:35 ::: Varsh [db404714@gateway/web/freenode/ip.219.64.71.20] has quit [Quit: Page closed]
21:37 < kaushiksk> | takes output of prev file/process and feeds it to the next process
21:37 < Harita_Reddy_> | feeds the output of the left command to input of the right one.  < gives the file as input to the command
21:42 ::: Harita_Reddy_ [3cfe7e20@gateway/web/freenode/ip.60.254.126.32] has quit [Quit: Page closed]
21:43 ::: AdithyaBhat_ [dfe38d3b@gateway/web/freenode/ip.223.227.141.59] has joined #ieee-UNIX
21:43 ::: Harita_Reddy [3cfe7e20@gateway/web/freenode/ip.60.254.126.32] has joined #ieee-UNIX
21:43 < AdithyaBhat_> Moving on.
21:43 < AdithyaBhat_> Here is a trick.
21:43 < AdithyaBhat_> Kind of an advanced feature,
21:44 < AdithyaBhat_> > is used to redirect output to a file.
21:44 < AdithyaBhat_> Whereas >> is used to append the file.
21:44 < AdithyaBhat_> command > file
21:44 < AdithyaBhat_> overwrites the file.
21:44 ::: AdithyaBhat [dfe38d3b@gateway/web/freenode/ip.223.227.141.59] has quit [Ping timeout: 250 seconds]
21:44 < AdithyaBhat_> command >> file will append to the file.
21:45 < AdithyaBhat_> Now the nice thing is the Here File.
21:46 < AdithyaBhat_> say you want to calculate an expression using bc quicky.
21:46 < AdithyaBhat_> You could it using here file as follows.
21:46 < AdithyaBhat_> bc<<<2^5
21:46 < AdithyaBhat_> Notice the Three <<<
21:47 < AdithyaBhat_> This can be used wherever the command needs a file but you're too lazy to type one.
21:47 < AdithyaBhat_> Just use the here file.
21:47 < AdithyaBhat_> Clear?
21:47 < AdithyaBhat_> Any questions?
21:47 < kaushiksk> did not get it
21:49 < kaushiksk> 2^5 is the Here file in this case ?
21:49 < AdithyaBhat_> 2^5 is the content of the file.
21:50 < AdithyaBhat_> echo "2^5" | bc
21:50 < AdithyaBhat_> is the same as
21:50 < AdithyaBhat_> bc<<<2^5
21:50 < AdithyaBhat_> which is also the same as
21:50 < AdithyaBhat_> cat file | bc
21:50 < AdithyaBhat_> where file contains 2^5.
21:51 < AdithyaBhat_> I will be taking a break for 10 minutes.
21:51 < AdithyaBhat_> The session will resume at 10:15.
21:52 < AdithyaBhat_> Gotta discuss about your projects.
21:52 ::: Harita_Reddy [3cfe7e20@gateway/web/freenode/ip.60.254.126.32] has left #ieee-UNIX []
21:53 < ABHISHEK> Ok
21:57 ::: ABHISHEK [2bf79cb8@gateway/web/freenode/ip.43.247.156.184] has quit [Ping timeout: 250 seconds]
22:02 ::: Harita_Reddy [3cfe7e20@gateway/web/freenode/ip.60.254.126.32] has joined #ieee-UNIX
22:15 < AdithyaBhat_> Any questions about the here file?
22:15 < AdithyaBhat_> Instead of using echo everytime you can use the here file instead.
22:15 ::: ABHISHEK [2bf79cb8@gateway/web/freenode/ip.43.247.156.184] has joined #ieee-UNIX
22:16 < AdithyaBhat_> Even to test sed or tr or grep or anyother command.
22:16 < AdithyaBhat_> tr "a" "A" <<<AaaaaAAAAaaaAAA
22:17 < AdithyaBhat_> grep "x" <<<xxxyxyxyxyxyyyyyyyyyyyxxxxxxxx
22:17 < AdithyaBhat_> clear?
22:19 < kaushiksk> oh ok
22:20 < swati_> yeah
22:21 < m_gautham_> somewhat
22:21 < AdithyaBhat_> Bash is so powerful that there is more than one way to do anything.
22:22 < AdithyaBhat_> After here files, there is command substitution.
22:22 < AdithyaBhat_> Is that covered?
22:22 < ABHISHEK> Nope
22:23 < AdithyaBhat_> About command substitution:
22:23 < AdithyaBhat_> Suppose you wish to use the output of a command as a parameter to a function.
22:24 < AdithyaBhat_> Then you can use command substitution.
22:24 < AdithyaBhat_> For example: you would like to search the output of ls using grep.
22:25 < AdithyaBhat_> One way too do it would be ls | grep "word"
22:27 < AdithyaBhat_> another way is grep "word" <<<`ls`
22:27 < AdithyaBhat_> Can anyone briefly tell what is happening?
22:28 < kaushiksk> we're using the output og ls as the here file for grep
22:28 < kaushiksk> of*
22:28 < AdithyaBhat_> You're close.
22:29 < AdithyaBhat_> The contents of the here file is the output of ls itself.
22:29 < kaushiksk> is it necessary to enclose ls in single quotes ?
22:29 < AdithyaBhat_> They are known as back quotes.
22:30 < AdithyaBhat_> ` and ' are differnt.
22:30 < kaushiksk> oh ok
22:30 < AdithyaBhat_> The left one is a back quote (`) below the ~ symbol on the keyboard.
22:31 < AdithyaBhat_> You will see more uses of command substition when it comes to scripting.
22:31 < AdithyaBhat_> The last thing left is Process substitution.
22:33 < AdithyaBhat_> The same example of giving the output of one command to another command can be achieved by process substitution.
22:33 < AdithyaBhat_> Eg.
22:33 ::: swati [~swati@117.215.133.211] has joined #ieee-UNIX
22:33 ::: swati_ [~swati@59.93.239.161] has quit [Ping timeout: 258 seconds]
22:33 < AdithyaBhat_> Command1 <( command 2 )
22:34 < AdithyaBhat_> grep "word" <(cat some_file)
22:34 < AdithyaBhat_> Note that there must not be any space between < and (.
22:35 < AdithyaBhat_> That's it.
22:35 < AdithyaBhat_> That is  all there is to know about I/O redirection.
22:35 < AdithyaBhat_> Any questions?
22:38 < AdithyaBhat_> http://tldp.org/LDP/abs/html/process-sub.html
22:41 < AdithyaBhat_> If there are no questions, we are done for today.
22:41 < m_gautham_> thanks
22:42 < soundaryaramesh> https://linuxjourney.com/ You can refer to this too.
22:42 < ABHISHEK> Before the 10 min break you said that der wil b a discussion on the project...
22:43 < AdithyaBhat_> 5/13 members are here.
22:44 < AdithyaBhat_> The only thing is: you will have to come up with an idea for a tool.
22:44 < kaushiksk> alright
22:45 < AdithyaBhat_> You have seen many tools now.
22:45 < AdithyaBhat_> ls, grep, tr, sed, wc and so many more.
22:45 < AdithyaBhat_> Come up with an idea for your own tool.
22:45 < ABHISHEK> Cool ..ok
22:45 < swati> okay
22:46 < AdithyaBhat_> Do not worry about the complexity and switches and option handling and so on.
22:46 < AdithyaBhat_> If there is time, we will teach you syntax parsing.
22:47 < AdithyaBhat_> But you will have to come up with an idea by 15th of June.
22:47 < AdithyaBhat_> Team sizes can vary from 1 to infinty.
22:48 < AdithyaBhat_> You can work on multiple projects
22:48 < AdithyaBhat_> Like a team of two can do two projects.
22:49 < AdithyaBhat_> Note that you will be judged on the quality of the project and not on the quantity.
22:50 ::: Irssi: #ieee-UNIX: Total of 10 nicks [0 ops, 0 halfops, 0 voices, 10 normal]
22:51 < AdithyaBhat_> That's it.
22:51 < soundaryaramesh> Good night guys.
22:51 ::: soundaryaramesh [~soundarya@117.202.66.169] has left #ieee-UNIX []
--- Log closed Fri Jun 03 22:51:36 2016
